<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: assets | Mike Ballou]]></title>
  <link href="http://mikeballou.com/blog/categories/assets/atom.xml" rel="self"/>
  <link href="http://mikeballou.com/"/>
  <updated>2013-11-27T14:35:25-08:00</updated>
  <id>http://mikeballou.com/</id>
  <author>
    <name><![CDATA[Mike Ballou]]></name>
    <email><![CDATA[mikeballou@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serving Rails assets from the cloud]]></title>
    <link href="http://mikeballou.com/blog/2013/01/21/serving-rails-assets-from-the-cloud/"/>
    <updated>2013-01-21T14:57:44-08:00</updated>
    <id>http://mikeballou.com/blog/2013/01/21/serving-rails-assets-from-the-cloud</id>
    <content type="html"><![CDATA[<p>Recently I have had to build several high performance websites.
These sites were simple sites but were heavy in images and we were
expecting large amounts of traffic.  I was using heroku to host the
sites so I could easily scale to a large number of dynos but why
have all of the excess http request for all of the assets hit my
heroku app too.</p>

<p>So I knew I was going to offload all of my images, css, fonts, and
javascript onto s3 and maybe even run cloudfront to speed things up
further, but managing:</p>

<ol>
<li>copying all of those assets to s3</li>
<li>being sure that every time I change an asset I upload it to S3</li>
<li>managing the urls to the assets</li>
</ol>


<p>was going to be a pain in the ass.</p>

<p>Luckily with the help of Rails 3.2&rsquo;s asset pipeline and a little
gem called &lsquo;asset_sync&rsquo; everything can be made much simpler.</p>

<!--more-->


<p>You start by adding the gem to you Gemfile:</p>

<p><code>ruby
gem 'asset_sync'
</code>
and bundle install</p>

<p>Next we need to add the asset_host to our production.rb</p>

<p>```ruby</p>

<h1>config/environments/production.rb</h1>

<p>config.action_controller.asset_host = &ldquo;//#{ENV[&lsquo;FOG_DIRECTORY&rsquo;]}.s3.amazonaws.com&rdquo;
```</p>

<p>Then we need to set some config variables on heroku for the gem
to use.  You will need your s3 bucket name, aws access key and aws
secret key.  You can optionally add that you want the assets
gzipped and what AWS region you bucket is located in.</p>

<p>```bash
heroku config:add AWS_ACCESS_KEY_ID=xxxx
heroku config:add AWS_SECRET_ACCESS_KEY=xxxx
heroku config:add FOG_DIRECTORY=xxxx
heroku config:add FOG_PROVIDER=AWS</p>

<h1>and optionally:</h1>

<p>heroku config:add FOG_REGION=us-west-1
heroku config:add ASSET_SYNC_GZIP_COMPRESSION=true
```</p>

<p>If you are going to use this in production that is all you need,
but if you are running your app in any other environment
(e.g. staging) you will need to run:</p>

<p><code>bash
heroku labs:enable user-env-compile -a myapp
</code></p>

<p>Without this everything will be compiled as if in production
which may cause some issues.</p>

<p>Now the next time you push to heroku your assets will be
uploaded to s3 and all of you links/sources will point to the
s3 urls (provided you used the rails view helpers).</p>
]]></content>
  </entry>
  
</feed>
